use backend::{
    planetscale::{PlanetScale, PlanetScaleConfig, PlanetScaleOrg},
    tracing::{tracing_subscribe, ResultTracingExt},
    Result,
};
use reqwest::{header, ClientBuilder};
use std::env;

#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscribe().expect("Tracing subscription failed.");

    let home_dir = env::var("HOME").unwrap();
    let pscale_config =
        PlanetScaleConfig::new(format!("{}/.config/planetscale", home_dir).as_str()).maybe_log()?;

    let mut headers = header::HeaderMap::new();

    let mut authorization_value =
        header::HeaderValue::from_str(pscale_config.token.as_str()).unwrap();
    authorization_value.set_sensitive(true);

    headers.insert("Authorization", authorization_value);

    headers.insert(
        "Content-Type",
        header::HeaderValue::from_static("application/json"),
    );

    let client = ClientBuilder::new()
        .default_headers(headers)
        .build()
        .unwrap();
    let planetscale = PlanetScale::new(client);

    let organizations = planetscale.org().list().await?;

    for organization in organizations.data {
        println!("{}", &organization.name);
    }

    Ok(())
}

/// PlanetScale GUI tool that simplify your local development workflow.
#[derive(clap::Parser)]
#[clap(about, long_about=None, version)]
struct Cli {
    #[clap(subcommand)]
    command: Command,

    /// PlanetScale CLI config directory. Defaults to $HOME/.config/planetscale.
    #[clap(long, value_parser)]
    config_dir: Option<String>,

    /// Use custom service token instead of the default token generated by `pscale auth login`.
    #[clap(long, value_parser)]
    service_token: Option<String>,
}

#[derive(clap::Subcommand)]
enum Command {
    /// Start the Voyager server on local network, this is the default command.
    Start,
}
