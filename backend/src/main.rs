use backend::{planetscale::PlanetScale, tracing::tracing_subscribe, Configuration, Result};
use ureq::AgentBuilder;

fn main() -> Result<()> {
    tracing_subscribe().expect("Tracing subscription failed.");

    let configuration = Configuration::default();

    let agent = AgentBuilder::new().https_only(true).build();

    let planetscale = PlanetScale::new(agent, &configuration)?;

    for organization in planetscale.org().list()?.data {
        println!("{}", &organization.name);
    }

    Ok(())
}

/// PlanetScale GUI tool that simplify your local development workflow.
#[derive(clap::Parser)]
#[clap(about, long_about=None, version)]
struct Cli {
    #[clap(subcommand)]
    command: Command,

    /// PlanetScale CLI config directory. Defaults to $HOME/.config/planetscale.
    #[clap(long, value_parser)]
    config_dir: Option<String>,

    /// Use custom service token instead of the default token generated by `pscale auth login`.
    #[clap(long, value_parser)]
    service_token: Option<String>,
}

#[derive(clap::Subcommand)]
enum Command {
    /// Start the Voyager web dashboard.
    Dashboard,
}
